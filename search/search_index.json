{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Merhaba!","text":"<p>Tuttu\u011fum notlar\u0131 burada bar\u0131nd\u0131r\u0131yorum.</p>"},{"location":"Docker/oracle_database_sqlplus/","title":"Oracle Database SQLPlus Giri\u015f Yapma","text":"<p>A\u015fa\u011f\u0131daki i\u015flemleri mac cihaz\u0131n\u0131zda terminal \u00fczerinde \u00e7al\u0131\u015ft\u0131rabilirsiniz.</p> <ol> <li> <p>Docker \u00fczerinde bulunan mevcut imajlar\u0131n\u0131 g\u00f6r\u00fcnt\u00fcler.</p> <pre><code>docker image ls\n</code></pre> </li> <li> <p>Docker i\u00e7in oracle veritaban\u0131 konteyn\u0131r\u0131n\u0131 aya\u011fa kald\u0131r\u0131r.</p> <pre><code>docker run &lt;konteyn\u0131r id veya konteyn\u0131r ismi&gt;\n</code></pre> </li> <li> <p>Docker \u00fczerinde \u00e7al\u0131\u015fan konteyn\u0131rlar\u0131 g\u00f6r\u00fcnt\u00fcler.</p> <pre><code>docker image ps\n</code></pre> </li> <li> <p>Hedeflenen konteyn\u0131r\u0131n terminaline giri\u015f yapar.</p> <pre><code>docker exec -it &lt;konteyn\u0131r id veya ismi&gt; bash\n</code></pre> </li> <li> <p>Oracle konteyn\u0131r i\u00e7inde SQLPlus komutunu \u00e7al\u0131\u015ft\u0131rarak veritaban\u0131nda y\u00f6netici ayr\u0131cal\u0131klar\u0131 ile i\u015flem yap\u0131labilir.</p> <pre><code>sqlplus / as sysdba\n</code></pre> </li> <li> <p>Belirtilen kullan\u0131c\u0131 ad\u0131 ve \u015fifre ile veritaban\u0131 y\u00f6netimi i\u00e7in bir hesap olu\u015fturur. (Bloklar\u0131 yazmay\u0131n\u0131z.)</p> <pre><code>CREATE USER &lt;Username&gt; IDENTIFIED BY &lt;Password&gt;;\n</code></pre> </li> <li> <p>A\u015fa\u011f\u0131daki komutlar ile yetki verin.</p> <pre><code>GRANT CONNECT, RESOURCE TO &lt;Username&gt;;\n</code></pre> </li> <li> <p>...</p> <pre><code>GRANT DBA TO &lt;Username&gt;;\n</code></pre> </li> <li> <p>Belirtilen dizinde dizin yolu olu\u015fturun.</p> <pre><code>CREATE OR REPLACE DIRECTORY EXPORT_DIR AS 'C:\\EXPORT;\n</code></pre> </li> <li> <p>SQLPlus i\u00e7erisinden \u00e7\u0131k\u0131n.</p> <pre><code>exit\n</code></pre> </li> <li> <p>\u015eemay\u0131 aktar\u0131n.</p> <pre><code>impdp &lt;Username&gt;/&lt;Password&gt;@localhost:1521/FREE schemas=C##MUSA remap_schema=C##MUSA:&lt;Username&gt; directory=EXPORT_DIR dumpfile=EXPORT_FILE.dmp logfile=my_import.log content=ALL\n</code></pre> </li> </ol>"},{"location":"JavaSpring/application_properties/","title":"6. application.properties Dosyas\u0131 Nedir?","text":"<ul> <li>Java Spring Boot uygulamas\u0131n\u0131n veritaban\u0131 ayarlar\u0131n\u0131 tespit edebilmesi i\u00e7in i\u00e7inde veri taban\u0131 ayarlar\u0131n\u0131 bar\u0131nd\u0131ran dosyad\u0131r.</li> <li><code>@PropertySource(value = \"classpath:app.properties)</code> anotasyonu ile application.properties dosyas\u0131n\u0131n ad\u0131n\u0131n app.properties olarak \u00e7al\u0131\u015ft\u0131r\u0131labilmesini sa\u011flar. Yani dosyan\u0131n ad\u0131 app.properties ise uygulama aya\u011fa kalkabilir. Bu anotasyon ana s\u0131n\u0131fa yaz\u0131l\u0131r.</li> <li><code>@Value</code> anotasyonu, properties i\u00e7indeki de\u011ferlere ihtiyac\u0131m\u0131z oldu\u011funda kullan\u0131l\u0131r.  <code>@Value(\"${spring.datasource.url}\")</code> anotasyonu da url de\u011ferini, anotasyon yaz\u0131lan de\u011fi\u015fkene \u00e7eker.</li> <li>@ConfigurationProperties anotasyonu, veritaban\u0131ndaki array de\u011fi\u015fkenleri tutabilir.</li> </ul>"},{"location":"JavaSpring/basic_annotations/","title":"1.Temel Anotasyonlar","text":""},{"location":"JavaSpring/basic_annotations/#11-pathvariable","title":"1.1 @PathVariable","text":"<p>URL'nin par\u00e7as\u0131 olan de\u011ferleri almak i\u00e7in kullan\u0131l\u0131r.</p> <pre><code>@GetMapping(\"/users/{id}\")\npublic ResponseEntity&lt;User&gt; getUserById(@PathVariable Long id) {\n    return ResponseEntity.ok(userService.getById(id));\n}\n</code></pre> <ul> <li>GET: /users/42 \u2192 \"42\" de\u011feri @PathVariable Long id ile yakalan\u0131r.</li> </ul>"},{"location":"JavaSpring/basic_annotations/#12-requestparam","title":"1.2. @RequestParam","text":"<p>URL'nin sonunda ? ile ba\u015flayan ve &amp; ile ayr\u0131lan query string parametrelerini almak i\u00e7in kullan\u0131l\u0131r.  </p> <pre><code>@GetMapping(\"/search\")\npublic ResponseEntity&lt;List&lt;User&gt;&gt; searchUsers(@RequestParam String name) {\n    return ResponseEntity.ok(userService.searchByName(name));\n}\n</code></pre> <ul> <li>GET: /search?name=enes \u2192 name=enes \u2192 @RequestParam String name ile al\u0131n\u0131r.</li> </ul>"},{"location":"JavaSpring/basic_annotations/#13-requestbody","title":"1.3. @RequestBody","text":"<p>Client taraf\u0131ndan POST veya PUT isteklerinde g\u00f6nderilen JSON verilerini nesneye d\u00f6n\u00fc\u015ft\u00fcr\u00fcr.</p> <pre><code>@PostMapping(\"/users\")\npublic ResponseEntity&lt;String&gt; createUser(@RequestBody User user) {\n    userService.createUser(user);\n    return ResponseEntity.ok(\"Kullan\u0131c\u0131 olu\u015fturuldu\");\n}\n</code></pre> <p>G\u00f6nderilen JSON: <pre><code>{\n  \"name\": \"Enes\",\n  \"email\": \"enes@example.com\"\n}\n</code></pre></p>"},{"location":"JavaSpring/basic_annotations/#14-requestmapping-snf-duzeyinde","title":"1.4. @RequestMapping (S\u0131n\u0131f D\u00fczeyinde)","text":"<p>HTTP isteklerini denetleyici s\u0131n\u0131f\u0131n\u0131zdaki y\u00f6ntemlere e\u015fleyen Spring Framework'te \u00e7ok y\u00f6nl\u00fc bir a\u00e7\u0131klamad\u0131r.</p> <pre><code>// T\u00fcm metodlara bu k\u00f6k path eklenir\n@RequestMapping(\"/rest/api\")\n</code></pre> <p>MVC \u0130stek Haritas\u0131</p> <p>Controller (@RestController) \u2194 Service (@Service) \u2194 Repository (@Repository) \u2194 Database</p>"},{"location":"JavaSpring/exceptions/","title":"7. Exception Y\u00f6netimi","text":"<ul> <li>Hata yakalama, bir bilgisayar program\u0131n\u0131n \u00e7al\u0131\u015ft\u0131\u011f\u0131 s\u0131rada hata ya da istisnai bir durumla kar\u015f\u0131la\u015fmas\u0131 durumunda meydana gelen \u00f6zel durumda yap\u0131lmas\u0131 gereken i\u015flemlerin genel ad\u0131d\u0131r.</li> </ul>"},{"location":"JavaSpring/exceptions/#71-baseexception-hata-olusturma","title":"7.1. BaseException (Hata Olu\u015fturma)","text":"<pre><code>public class BaseException extends RuntimeException {\n    public BaseException () {\n    }\n}\npublic class ErrorMessage {\n    NO_RECORD_EXIST(\"1001\", \"Kay\u0131t bulunamad\u0131!\"),\n    GENERAL_EXCEPTION(\"9999\", \"Genel bir hata olu\u015ftu.\");\n    private String code;\n    private String message;\n    MessageType(String code, String message) {\n         this.code = code;\n         this.message = message;\n    }\n}\n</code></pre>"},{"location":"JavaSpring/exceptions/#72-globalexceptionhandler-hata-yakalama","title":"7.2. GlobalExceptionHandler (Hata Yakalama)","text":"<pre><code>@ControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(value = {BaseException.class})\n    public void handleBaseException(BaseException exception){\n        return ResponseEntity.badRequest().body(exception.getMessage());\n    }\n}\n</code></pre>"},{"location":"JavaSpring/exceptions/#73-controllerdan-ayn-formatta-cevap-donmek","title":"7.3. Controller'dan Ayn\u0131 Formatta Cevap D\u00f6nmek","text":"<ul> <li>Hatan\u0131n generic tipte olmas\u0131 \u00f6nemlidir.</li> </ul>"},{"location":"JavaSpring/http_methods/","title":"2. HTTP Metotlar\u0131","text":""},{"location":"JavaSpring/http_methods/#21-get-istegi","title":"2.1. GET ISTEGI","text":"<p>Bir GET iste\u011fi, sunucudan belirli bir bilgi veya kaynak ister. Bir web sitesine ba\u011fland\u0131\u011f\u0131n\u0131zda, taray\u0131c\u0131n\u0131z genellikle sayfan\u0131n y\u00fcklenmesi i\u00e7in ihtiya\u00e7 duydu\u011fu verileri almak \u00fczere birka\u00e7 GET iste\u011fi g\u00f6nderir.</p> <pre><code>@GetMapping(path = \"/employee-list/{id}\")\npublic Employee getEmployeeById(@PathVariable(name = \"id\", required = true) String id)\n</code></pre>"},{"location":"JavaSpring/http_methods/#22-post-istegi","title":"2.2. POST ISTEGI","text":"<p>Herhangi bir ama\u00e7la bilgi g\u00f6ndermek istedi\u011finizde, bilgiyi hedefe g\u00f6ndermek i\u00e7in POST iste\u011fini kullan\u0131rs\u0131n\u0131z.</p> <pre><code>@PostMapping(path = \"/save-employee\")\npublic Employee saveEmployee(@RequestBody Employee newEmployee) {\n    return employeeService.saveEmployee(newEmployee);\n}\n</code></pre>"},{"location":"JavaSpring/http_methods/#23-delete-istegi","title":"2.3. DELETE ISTEGI","text":"<p>DELETE y\u00f6ntemi, bir veritaban\u0131ndan veri kald\u0131rmak i\u00e7in kullan\u0131l\u0131r. Bir istemci bir DELETE iste\u011fi g\u00f6nderdi\u011finde, belirtilen URL'deki kayna\u011f\u0131n kald\u0131r\u0131lmas\u0131n\u0131 talep eder.</p> <pre><code>@DeleteMapping(path = \"/delete-employee/{id}\")\npublic boolean deleteEmployee(@PathVariable(name = \"id\") String id) {\n   return employeeService.deleteEmployee(id);\n}\n</code></pre>"},{"location":"JavaSpring/http_methods/#24-put-istegi","title":"2.4. PUT ISTEGI","text":"<p>PUT istekleri sunucudaki mevcut bir kayna\u011f\u0131 g\u00fcncellemek veya de\u011fi\u015ftirmek i\u00e7in kullan\u0131l\u0131r.</p> <pre><code>@PutMapping(path = \"/update-employee/{id}\")\npublic Employee updateEmployee(@PathVariable String id, \n                                @RequestBody UpdateEmployeeRequest request) {\n    return employeeService.updateEmployee(id, request);\n}\n</code></pre>"},{"location":"JavaSpring/json_web_token/","title":"10. JWT (JSON Web Token) Nedir?","text":"<ul> <li>JWT, kimliklendirme/yetkilendirme sa\u011flar. Kullan\u0131c\u0131n\u0131n do\u011frulanmas\u0131, web servis g\u00fcvenli\u011fi, bilgi g\u00fcvenli\u011fi gibi bir \u00e7ok konuda kullan\u0131l\u0131r.</li> <li>JWT kullan\u0131ld\u0131\u011f\u0131nda bir \"FILTER\" katman\u0131 eklenir. Bu durumda bir iste\u011fin y\u00f6nlendirmesi \u015fu \u015fekilde olacakt\u0131r: Filter \u2194 Controller \u2194 Service \u2194 Repository \u2194 Database</li> <li>Yap\u0131lan iste\u011fe g\u00f6re e\u011fer iste\u011fi yapan ki\u015fi sahip oldu\u011fu token ile yetkili ise iste\u011fi filter katman\u0131ndan ge\u00e7erek i\u015flenmeye devam eder.</li> </ul>"},{"location":"JavaSpring/junit/","title":"9. JUnit Nedir?","text":"<ul> <li>JUnit en \u00e7ok tercih edilen Java test yaz\u0131l\u0131m iskeletidir (framework).</li> <li>src/test/java i\u00e7erisindeki paketin i\u00e7erisine test s\u0131n\u0131flar\u0131 yaz\u0131labilir. Metotlar <code>@Test</code> anotasyonu ile i\u015faretlenmelidir.</li> <li>A\u00e7\u0131lan s\u0131n\u0131flar <code>@SpringBootTest</code> anotasyonu ile i\u015faretlenmesi laz\u0131m.</li> <li>Bazen projenin ana s\u0131n\u0131f\u0131n\u0131 bulamayabilir. Bu durumlarda <code>@SpringBootTest(classes = {ExceptionManagementStarter.class})</code> olarak d\u00fczenlenerek bu sorunun \u00fcstesinden gelinebilir.</li> <li>Test metotlar\u0131n\u0131n yaz\u0131l\u0131m\u0131 i\u00e7in standart \"test\"+\"i\u015flem ad\u0131\" \u015feklinde olmal\u0131d\u0131r. \u00d6rnek olarak \"testFindEmployeeById\" verilebilir.</li> <li>Test s\u0131n\u0131f\u0131 ile direk servise ba\u011flan\u0131l\u0131r.</li> <li>Assert metotlar\u0131 ile kontroller sa\u011flanabilir.</li> <li>AfterEach ve BeforeEach kavramlar\u0131.</li> </ul>"},{"location":"JavaSpring/relations/","title":"5. Relations Nedir?","text":"<p>Entityler aras\u0131ndaki ili\u015fkiyi sa\u011flar.  </p> <ul> <li>@OneToOne = Customer \u2194 Adress</li> <li>@OnetToMany = Department \u2194 Employee</li> <li>@ManyToOne = Employee \u2194 Department</li> <li>@ManyToMany = Student \u2194 Course</li> </ul>"},{"location":"JavaSpring/relations/#51-onetoone","title":"5.1. @OneToOne","text":"<ul> <li>Eklenen objeyi o objeye birebir olarak ba\u011flar.</li> <li>Ek bir kolon a\u00e7arak ili\u015fkilendirir.</li> </ul> <pre><code>public class Customer {\n    @OneToOne\n    private Adress adress;\n}\n</code></pre>"},{"location":"JavaSpring/relations/#52-onetomany","title":"5.2. @OneToMany","text":"<ul> <li>Bir evin birden fazla odaya sahip olmas\u0131 durumu. Birden \u00e7oka ili\u015fkisi.</li> <li>Yeni bir tablo a\u00e7ar.</li> </ul> <pre><code>public class Home {\n    @OneToMany\n    private Room room;\n}\n</code></pre>"},{"location":"JavaSpring/relations/#53-manytoone","title":"5.3. @ManyToOne","text":"<ul> <li>Birden \u00e7ok \u00e7al\u0131\u015fan\u0131n, bir departmana ba\u011fl\u0131 olmas\u0131 durumu. \u00c7oktan bire ili\u015fkisi.</li> <li>Ek bir kolon a\u00e7arak ili\u015fkilendirir.</li> </ul> <pre><code>public class Employee {\n    @ManyToOne\n    private Department department;\n}\n</code></pre>"},{"location":"JavaSpring/relations/#54-manytomany","title":"5.4. @ManyToMany","text":"<ul> <li>Birden \u00e7ok \u00f6\u011frencinin, birden \u00e7ok ders alabilmesi durumu. \u00c7oktan \u00e7oka ili\u015fkisi.</li> <li>Yeni bir tablo a\u00e7ar.</li> </ul> <pre><code>public class Student {\n    @ManyToMany\n    @JoinTable(name = \"student_course\",\n    joinColumns = @JoinColumn(name=\"student_id)\n    inverseJoinColums = @JoinColumn(name = \"course_id))\n    private list&lt;Course&gt; course;\n}\n</code></pre>"},{"location":"JavaSpring/scheduled/","title":"8. @Scheduled Anotasyonu","text":"<ul> <li>G\u00f6revleri zamanlamay\u0131 sa\u011flayan bir anotasyondur.</li> <li>Ana s\u0131n\u0131fta (@SpringBootApplication ile i\u015faretlenmi\u015f) @EnableScheduling anotasyonu ile aktif edilir.</li> <li>Zamanlama g\u00f6revleri i\u00e7in \"scheduled\" ad\u0131nda bir paket a\u00e7\u0131l\u0131r.</li> <li>Bir s\u0131n\u0131fa @Component anotasyonu verilmesi gerekir.</li> </ul> <pre><code>public class ScheduledExample {\n    // Saat 15:20'de a\u015fa\u011f\u0131daki fonksiyonu \u00e7al\u0131\u015ft\u0131rmak i\u00e7in ayarlam\u0131\u015ft\u0131r.\n    @Scheduled(cron = \"0 15 20 * * *\")\n    public void write1To10() {\n    }\n}\n</code></pre>"},{"location":"JavaSpring/spring_data_jpa/","title":"3. Spring Data JPA","text":""},{"location":"JavaSpring/spring_data_jpa/#31-genel-bilgi","title":"3.1. Genel Bilgi","text":"<ul> <li>Veritaban\u0131 ayarlar\u0131 <code>application.properties</code> dosyas\u0131nda tutulur.</li> <li><code>spring.jpa.hibernate.ddl-auto=create</code> sadece ilk tablo olu\u015fturma a\u015famas\u0131nda kullan\u0131lmal\u0131. Daha sonra <code>update</code> veya <code>none</code> yap\u0131lmal\u0131d\u0131r.  </li> </ul>"},{"location":"JavaSpring/spring_data_jpa/#32-repository-yaps","title":"3.2. Repository Yap\u0131s\u0131","text":"<pre><code>public interface StudentRepository extends JpaRepository&lt;Student, Integer&gt; {\n}\n</code></pre> <ul> <li>\u0130lk parametre Entity tipi (Student)</li> <li>\u0130kinci parametre ID tipi (Integer)</li> </ul>"},{"location":"JavaSpring/spring_data_jpa/#33-query-anotasyonu","title":"3.3. @Query Anotasyonu","text":"<p>HQL (Hibernate Query Language) veya native SQL yazmak i\u00e7in kullan\u0131l\u0131r.</p> <pre><code>// Student tablosundan t\u00fcm \u00f6\u011frencileri al\u0131r.\n@Query(value = \"from Student\", nativeQuery = false)\nList&lt;Student&gt; findAllStudents();\n\n// Student tablosundan id de\u011feri, parametre olarak al\u0131nan studentId ile e\u015fle\u015fen \u00f6\u011frenciyi al\u0131r.\n@Query(value = \"from Student s WHERE s.id = :studentId\")\nOptional&lt;Student&gt; findStudentById(Integer studentId);\n</code></pre>"},{"location":"JavaSpring/spring_validation/","title":"4. Spring Validation","text":"<ul> <li>Kontrolleri sa\u011flamak i\u00e7in kullan\u0131l\u0131r.  </li> <li>Spring Validation i\u00e7in belirli anotasyonlar vard\u0131r. K\u00fct\u00fcphane i\u00e7erisindeki anotasyonlar ile kontroller sa\u011flanabilir.  </li> <li>Dto i\u00e7in de\u011fi\u015fkene anotasyon atan\u0131r.  </li> <li>Servis taraf\u0131nda parametrenin \u00f6n\u00fcne @Valid anotasyonu yaz\u0131lmal\u0131d\u0131r.</li> </ul>"},{"location":"JavaSpring/spring_validation/#41-dto-nedir-ve-dto-ile-validation","title":"4.1. DTO Nedir ve DTO ile Validation","text":"<p>Data Transfer Object (DTO), veri transferi i\u00e7in kullan\u0131lan bir tasar\u0131m desenidir. DTO'lar, nesnelerin verilerini bir yerden ba\u015fka bir yere aktarmak i\u00e7in kullan\u0131l\u0131r. Genellikle bir veritaban\u0131ndan veri \u00e7ekilirken veya bir web hizmetine veri g\u00f6nderilirken DTO'lar kullan\u0131l\u0131r.</p> <p>DTO kullan\u0131lmas\u0131n\u0131n ba\u015fl\u0131ca nedenleri: 1. Kritik verileri korumak. 2. Veritaban\u0131ndaki verileri y\u00f6netebilmek.  </p> <pre><code>public class DtoStudentIU {\n    @NotEmpty(message = \"Firstname alan\u0131 bo\u015f b\u0131rak\u0131lamaz!\")\n    @Size(min = 3, max = 10, message = \"En az 3, en fazla 10 karakter olmal\u0131d\u0131r.\")\n    private String firstName;\n\n    @Size(min = 3, max = 30, message = \"En az 3, en fazla 30 karakter olmal\u0131d\u0131r.\")\n    private String lastName;\n\n    private Date birthOfDate;\n}\n</code></pre>"},{"location":"JavaSpring/spring_validation/#42-global-exception-handling","title":"4.2. Global Exception Handling","text":"<ul> <li>Spring Validation'dan f\u0131rlat\u0131lan hatalar\u0131 al\u0131p y\u00f6netmek ve anlaml\u0131 cevaplar (response) d\u00f6nmek yaz\u0131l\u0131m\u0131n y\u00f6netimi ve m\u00fc\u015fteriye sunulmas\u0131 i\u00e7in \u00f6nemlidir.</li> <li>Bu hatalar\u0131 yakalamak i\u00e7in yaz\u0131l\u0131m geli\u015ftirme standartlar\u0131na uygun olmas\u0131 a\u00e7\u0131s\u0131ndan \"exception\" ad\u0131nda bir paket a\u00e7\u0131l\u0131r. Bu paketin i\u00e7erisine \"GlobalExceptionHandler\" ad\u0131nda da bir s\u0131n\u0131f olu\u015fturulur ve @ControllerAdvice anotasyonu ile i\u015faretlenir.</li> </ul> <pre><code>@ExceptionsHandler(value = MethodArgumentNotValidException.class)\npublic void handleMethodArgumentsNotValidExceptions(MethodArgumentNotValidException ex) {\n    Map&lt;String, List&lt;String&gt;&gt; errorsMap = new HashMap&lt;&gt;();\n    for (ObjectError objError : ex.getBindingResult().getAllErrors()) {\n            // ((FieldError)objError).getField(); ifadesi yaklananan hatan\u0131n tipini yakalar.\n            Sring fieldName = ((FieldError)objError).getField();\n            if(errorsMap.containsKey(fieldName)) {\n\n            }\n            else {    }\n    }\n}\n</code></pre>"},{"location":"MkDocs/beginning/","title":"Yeni Bir Proje Olu\u015fturma","text":"<p>Yeni bir proje olu\u015fturmak olduk\u00e7a basit. A\u015fa\u011f\u0131daki komutlar \u00e7al\u0131\u015ft\u0131r\u0131larak yeni bir proje olu\u015fturulabilir.</p> <pre><code>mkdocs new my-project\ncd my-project\n</code></pre> <p>mkdocs.yml ad\u0131nda bir konfigrasyon dosyas\u0131 ve i\u00e7inde index.md markdown dosyas\u0131 bulunan \"docs\" ad\u0131nda bir klas\u00f6r olu\u015fturacakt\u0131r. \"docs\" klas\u00f6r\u00fc gerekli kaynak dosyalar\u0131n\u0131 bar\u0131nd\u0131r\u0131r. Bu klas\u00f6r\u00fcn varsay\u0131lan ayar\u0131 mkdocs.yml konfigrasyon dosyas\u0131nda, docs_dir de\u011feri alt\u0131nda de\u011fi\u015ftirilebilir.</p> <p>Sunucuyu ba\u015flatmak i\u00e7in a\u015fa\u011f\u0131daki komutu \u00e7al\u0131\u015ft\u0131rabilirsiniz:  </p> <pre><code>mkdocs serve\n</code></pre> <p>Yakla\u015f\u0131k olarak \u015f\u00f6yle bir \u00e7\u0131kt\u0131 al\u0131nacakt\u0131r:</p> <pre><code>INFO    -  Building documentation...\nINFO    -  Cleaning site directory\nINFO    -  Documentation built in 0.22 seconds\nINFO    -  [15:50:43] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO    -  [15:50:43] Serving on http://127.0.0.1:8000/\n</code></pre> <p>Taray\u0131c\u0131da http://127.0.0.1:8000/ url'sini a\u00e7\u0131n ve varsay\u0131lan sayfay\u0131 g\u00f6r\u00fcnt\u00fcleyin. Sunucunun otomatik yeniden y\u00fckleme \u00f6zelli\u011fi sayesinde, d\u00f6k\u00fcmanlardaki de\u011fi\u015fiklik sonucunda, sayfay\u0131 yeniledi\u011finiz taktirde sunucu hemen sayfay\u0131 g\u00fcncelleyecektir. A\u015fa\u011f\u0131da \u00f6rnek y\u00f6nlendirme ayarlar\u0131 bulunmaktad\u0131r:</p> <pre><code>nav:\n  - Home: index.md\n  - About: about.md\n</code></pre>"},{"location":"Staj/database_setup/","title":"Spring-Boot Projesi \u0130\u00e7in Veri Taban\u0131 Kurulumu","text":"<p>Oracle 23ai kurulduktan sonra yap\u0131lmas\u0131 a\u015fa\u011f\u0131da yap\u0131lmas\u0131 gerekenlerin listesi yer almaktad\u0131r. Bu komutlar <code>sqlplus</code> komutunun \u00e7al\u0131\u015fabilece\u011fi herhangi bir komut sat\u0131r\u0131 ile \u00e7al\u0131\u015ft\u0131r\u0131labilir.</p>"},{"location":"Staj/database_setup/#veri-taban-kullanc-olusturma-ve-yetkilendirme","title":"Veri Taban\u0131 Kullan\u0131c\u0131 Olu\u015fturma ve Yetkilendirme","text":"<p>'C:EXPORT' olarak klas\u00f6r olu\u015fturduktan ve .dmp uzant\u0131l\u0131 veritaban\u0131 dosyas\u0131 klas\u00f6r\u00fcn i\u00e7ine kopyaland\u0131ktan sonra a\u015fa\u011f\u0131daki komutlar\u0131n s\u0131ras\u0131 ile \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131yla veri taban\u0131nda kullan\u0131c\u0131 olu\u015fturulur ve gerekli yetkiler verilir, EXPORT klas\u00f6r\u00fc tan\u0131t\u0131l\u0131r ve veriler i\u00e7eri aktar\u0131l\u0131r:</p> <p><pre><code>sqlplus / as sysdba;\n</code></pre> <pre><code>CREATE USER C##&lt;Username&gt; IDENTIFIED BY &lt;Password&gt;\n</code></pre> <pre><code>GRANT CONNECT, RESOURCE TO C##&lt;Username&gt;\n</code></pre> <pre><code>GRANT DBA TO C##&lt;Username&gt;\n</code></pre> <pre><code>CREATE OR REPLACE DIRECTORY EXPORT_DIR AS 'C:\\EXPORT';\n</code></pre> <pre><code>impdp C##&lt;Username&gt;/&lt;Password&gt;@localhost:1521/FREE schemas=C##MUSA remap_schema=C##MUSA:C##&lt;Username&gt; directory=EXPORT_DIR dumpfile=EXPORT_FILE.dmp logfile=my_import.log content=ALL\n</code></pre></p>"},{"location":"Staj/database_setup/#veri-taban-iceri-ve-dsa-aktarma-import-export","title":"Veri Taban\u0131 \u0130\u00e7eri ve D\u0131\u015fa Aktarma (Import / Export)","text":"<p>Proje Oracle veritaban\u0131 kulland\u0131\u011f\u0131 i\u00e7in, veritaban\u0131 yede\u011fi almak veya ba\u015fka bir ortama aktarmak i\u00e7in Oracle'\u0131n <code>exp</code> ve <code>imp</code> (veya daha g\u00fcncel olarak <code>expdp</code> ve <code>impdp</code>) ara\u00e7lar\u0131 kullan\u0131labilir. Bu i\u015flemler sonucunda <code>.dmp</code> uzant\u0131l\u0131 dump dosyalar\u0131 elde edilir.</p>"},{"location":"Staj/database_setup/#export-yedek-alma","title":"Export (Yedek Alma)","text":"<p>A\u015fa\u011f\u0131daki komut ile ilgili kullan\u0131c\u0131ya ait t\u00fcm veritaban\u0131 nesneleri bir DMP dosyas\u0131na aktar\u0131l\u0131r: <pre><code>expdp &lt;Username&gt;/&lt;Password&gt;@localhost:1521/FREE schemas=&lt;Username&gt; directory=EXPORT_DIR dumpfile=backup.dmp logfile=backup.log\n</code></pre></p>"},{"location":"Staj/database_setup/#import-yedekten-geri-yukleme","title":"Import (Yedekten Geri Y\u00fckleme)","text":"<p>Al\u0131nan dump dosyas\u0131n\u0131 ba\u015fka bir veritaban\u0131na y\u00fcklemek i\u00e7in: <pre><code>impdp C##&lt;Username&gt;/&lt;Password&gt;@localhost:1521/FREE schemas=C##&lt;Username&gt; directory=EXPORT_DIR dumpfile=backup.dmp logfile=import.log\n</code></pre></p>"}]}